{"version":3,"sources":["Game.js","serviceWorker.js","index.js"],"names":["Square","props","className","winner","console","log","onClick","value","Board","i","this","squares","includes","rowWidth","Array","Math","sqrt","length","fill","cellOfRow","map","j","squareIndex","key","renderSquare","React","Component","calculateWinner","lines","a","b","c","line","Game","state","history","stepNumber","xIsNext","isReverse","slice","boardSize","moveLocation","floor","setState","concat","step","status","current","moves","move","desc","jumpTo","filter","handleClick","reverseMoveList","reversed","reverse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7faef396.chunk.js","sourcesContent":["import React, { createContext } from 'react';\n\nfunction Square(props) {\n  const className = `square ${props.winner}`\n  console.log(className)\n  return (\n    <button className={className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\n\nclass Board extends React.Component {\n  \n  renderSquare(i) {\n    const {squares, winner} = this.props;\n    console.log(winner)\n    return (\n      <Square\n        value={squares[i]}\n        onClick={() => this.props.onClick(i)}\n        winner = {winner && winner.includes(i) ? 'highlight-win' : ''}\n      />\n    );\n  }\n\n  render() {\n    const rowWidth = Array(Math.sqrt(this.props.squares.length)).fill(null);\n    const cellOfRow = rowWidth;\n    const board = rowWidth.map((value, i) => {\n      const squares = cellOfRow.map((value, j) => {\n        const squareIndex = i * rowWidth.length + j;\n        return(\n          <span key={squareIndex}>{this.renderSquare(squareIndex)}</span>\n        );\n      });\n      return <div key={i}>{squares}</div>\n    });\n    return board;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      isReverse: false\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    const boardSize = Math.sqrt(squares.length);\n    const moveLocation = [Math.floor(i/boardSize + 1), i % boardSize + 1];\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          moveLocation\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n  reverseMoveList(isReverse) {\n    this.setState({\n      isReverse: !isReverse\n    })\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const isReverse = this.state.isReverse;\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        `Go to move #${move} (${step.moveLocation[0]}, ${step.moveLocation[1]})`:\n        'Go to game start';\n        console.log(`${move} - ${this.state.stepNumber}`)\n        if (move === this.state.stepNumber) {\n          return (\n            <li key={move} >\n              <button  className=\"move-selected\" onClick={() => this.jumpTo(move)}>{desc}</button>\n            </li>\n          );\n        } else {\n          return (\n            <li key={move}>\n              <button onClick={() => this.jumpTo(move)}>{desc}</button>\n            </li>\n          );\n        }\n      \n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner.winner;\n    } else {\n      console.log(current.squares);\n      if (current.squares.filter(value => value === null).length === 0) {\n        status = \"Draw\";\n      } else\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n            winner = {winner && winner.line}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.reverseMoveList(isReverse)}>Reverse moves</button>\n          \n          <ol reversed = {isReverse ? 'reverse' : ''}>{isReverse ? moves.reverse(): moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {winner: squares[a], line: lines[i]};\n    }\n  }\n  return null;\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}