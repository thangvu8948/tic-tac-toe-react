{"version":3,"sources":["components/Game/calculateWinner.js","components/Square/index.js","components/Board/index.js","components/Game/index.js","serviceWorker.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","winner","line","Square","props","className","onClick","value","Board","rowWidth","Array","Math","sqrt","fill","cellOfRow","map","j","squareIndex","key","includes","renderSquare","require","Game","status","useState","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","isReverse","setIsReverse","jumpTo","step","moves","move","desc","moveLocation","console","log","current","filter","hist","slice","boardSize","floor","concat","handleClick","reversed","reverse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.875ffe42.chunk.js","sourcesContent":["export function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return {winner: squares[a], line: lines[i]};\r\n      }\r\n    }\r\n    return null;\r\n  }","import React from 'react';\r\nexport function Square(props) {\r\n    const className = `square ${props.winner}`\r\n    return (\r\n      <button className={className} onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  export default Square;\r\n  ","import React from 'react';\r\nimport Square from '../Square/index';\r\nfunction Board(props) {\r\n    function renderSquare(i) {\r\n        const { squares, winner } = props;\r\n        return (\r\n            <Square\r\n                value={squares[i]}\r\n                onClick={() => props.onClick(i)}\r\n                winner={winner && winner.includes(i) ? 'highlight-win' : ''}\r\n            />\r\n        );\r\n    }\r\n\r\n    const rowWidth = Array(Math.sqrt(props.squares.length)).fill(null);\r\n    const cellOfRow = rowWidth;\r\n\r\n    return (\r\n        rowWidth.map((value, i) => {\r\n            const squares = cellOfRow.map((value, j) => {\r\n                const squareIndex = i * rowWidth.length + j;\r\n                return (\r\n                    <span key={squareIndex}>{renderSquare(squareIndex)}</span>\r\n                );\r\n            });\r\n            return <div key={i}>{squares}</div>\r\n        })\r\n    )\r\n}\r\n\r\nexport default Board;","import React, { useState } from 'react';\r\nimport Board from '../Board/index';\r\nconst { calculateWinner } = require(\"./calculateWinner\");\r\nexport function Game(props) {\r\n    const [history, setHistory] = useState([{ squares: Array(9).fill(null) }]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [isReverse, setIsReverse] = useState(false);\r\n    \r\n    const handleClick = (i) => {\r\n        const hist = history.slice(0, stepNumber + 1);\r\n        const current = hist[hist.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        const boardSize = Math.sqrt(squares.length);\r\n        squares[i] = xIsNext ? \"X\" : \"O\";\r\n        const moveLocation = [Math.floor(i/boardSize + 1), i % boardSize + 1];\r\n        setHistory(hist.concat([{ squares, moveLocation }]));\r\n        setStepNumber(hist.length);\r\n        setXIsNext(!xIsNext);\r\n    }\r\n\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0);\r\n    }\r\n\r\n    const reverseMoveList = () => {\r\n        setIsReverse(!isReverse);\r\n    }\r\n    \r\n    const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n        `Go to move #${move} (${step.moveLocation[0]}, ${step.moveLocation[1]})`:\r\n        'Go to game start';\r\n        console.log(`${move} - ${stepNumber}`)\r\n        if (move === stepNumber) {\r\n          return (\r\n            <li key={move} >\r\n              <button  className=\"move-selected\" onClick={() => jumpTo(move)}>{desc}</button>\r\n            </li>\r\n          );\r\n        } else {\r\n          return (\r\n            <li key={move}>\r\n              <button onClick={() => jumpTo(move)}>{desc}</button>\r\n            </li>\r\n          );\r\n        }\r\n    })\r\n\r\n    let status;\r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    if (winner) {\r\n      status = \"Winner: \" + winner.winner;\r\n    } else {\r\n      console.log(current.squares);\r\n      if (current.squares.filter(value => value === null).length === 0) {\r\n        status = \"Draw\";\r\n      } else\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n    return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={i => handleClick(i)}\r\n              winner = {winner && winner.line}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <button onClick={() => reverseMoveList(isReverse)}>Reverse moves</button>\r\n            \r\n            <ol reversed = {isReverse ? 'reverse' : ''}>{isReverse ? moves.reverse(): moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game/index'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}